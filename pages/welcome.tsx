import Head from 'next/head'
import { Inter } from '@next/font/google'
import {  useEffect, useState } from 'react'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faCircleNotch } from '@fortawesome/free-solid-svg-icons'
import {firebaseClientService} from '../clientFirebase/services/services'
import useNavigate from '../hooks/useNavigate'






const inter = Inter({ subsets: ['latin'] })

 export default function Welcome() {
  const navigate = useNavigate()
  // The `onload` state variable is used to track whether the component is currently loading.
  // its used to give time to the app to call the getToken method in router protection function called in the useEffect hook, untill then, the Welcome page will not be mounted, to avoid any error.
  const [onload, setOnload] = useState(true)
  const [userName,setUserName] = useState("user")



  const sendGetHttpRequest = async ( token:string) => {
    try {
      const res = await fetch("http://localhost:3000/api/userVerification", {
        method: "GET",
        headers: {
          'Content-Type': 'application/json',
          'authorization': `bearer ${token}`
        }
      });
      const data =  res
      const dataJson = await data?.json();
      return (
        {dataJson}
      )
    } catch (err) {
      console.log(err);
    }
  }

  //trogth the token of the user who's session is currently active the function verify the data of the user
  const verifyUser = async()=>{
    const userToken = await firebaseClientService.getToken();
    if(userToken){
      const user = await sendGetHttpRequest(userToken)
      setUserName(user?.dataJson.decodedToken.name)
      setOnload(false)
    } else {return null}

  }

  useEffect(() => {
    const routerProtection=async () =>{
    // This function is used to protect certain routes from being accessed unless the user is logged in.
    // If the user is logged in, the welcome page component will be mounted.
    // If the user is not logged in, they will be redirected to the `/login` route.
      const user =  await firebaseClientService.getToken();
      // If the token is falsy (i.e. if the user is not logged in), navigate to the `/login` route
      if (!user){
        navigate("/login")}
        else if (user){
      //If the token is truthy (i.e. if the user is logged in), call the `verifyUser` function, wich trogth the token returns the user data
        verifyUser ()
      } else {console.log(user)}
        
      
        
    }
    //the timeout of 1000 ms is used to avoid any error in the minor possible time
    setTimeout(routerProtection,1000)
   
  }, [])

  //Button to log out, the user session will stay active until an explicit logout
  const handleLogOutButton = async ()=>{
    await firebaseClientService.handleSignout()
    navigate( "/login" )
  }



  return (
    <>
      <Head>
      <title>Welcome!</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className='w-screen h-screen flex bg-slate-600  items-center justify-center '> 
          <div>{onload ? <FontAwesomeIcon icon={faCircleNotch} className="text-7xl text-yellow-500 animate-spin"/>
          :
          <div className='flex flex-col items-center'>
            <p className='text-white text-5xl font-bold'>Welcome {userName}!</p>
            <button onClick={handleLogOutButton} className="bg-white text-teal-700 h-8 w-24 font-semibold rounded-full mt-5">logout</button>
          </div>
           }
          </div>
        </div>
      </main>
    </>
  )
}

