import Head from 'next/head'
import { Inter } from '@next/font/google'
import { FormEvent, ChangeEvent, useState, useEffect } from 'react'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faUser, faLock, faEye} from '@fortawesome/free-solid-svg-icons'
import { faGoogle} from '@fortawesome/free-brands-svg-icons'
import useNavigate from '../hooks/useNavigate'
import {firebaseClientService} from '../clientFirebase/services/services'





const inter = Inter({ subsets: ['latin'] })

export default function Home() {

  const navigate = useNavigate()

  // The `onload` state variable is used to track whether the component is currently loading.
 // its used to give time to the app to call the getToken method in router protection function called in the useEffect hook, untill then, the "continue with google" button is unactive, to avoid any error
  const [onload, setOnload] = useState (true)

  useEffect(() => {
    // This function is used to protect certain routes from being accessed unless the user is logged in.
    // If the user is logged in, they will be redirected to the `/welcome` route.
    // If the user is not logged in, the `onload` state variable will be set to `false`, which will cause the "continue with google" button to be rendered.
    const routerProtection=async () =>{
      // Get the user's Firebase ID token
      const user =  await firebaseClientService.getToken();
      // If the token is falsy (i.e. if the user is not logged in), set the `onload` state variable to `false`
      if (!user){
        setOnload(false)}
      // If the token is truthy (i.e. if the user is logged in), navigate to the `/welcome` route
        else if (user){
        navigate("/welcome")
      } else {console.log(user)} 
    }
    //the timeout of 800 ms is used to avoid any error in the minor possible time
    setTimeout(routerProtection,800)
   
  }, [])


  const [inputs, setInputs]= useState({
    email:"",
    password:""
  })
  
  // The `visibility` state variable is an object that contains the type (i.e. "text" or "password") and style of the password input field in the login form.
  const [visibility, setVisibility]=useState ({
    type:"password",
    style: "absolute text-teal-700 text-3xl right-1 top-1"
  })
  const handleToggleButton = () => {
    setVisibility({
      type: visibility.type === "password" ? "text" : "password",
      style: visibility.type === "password" ? "absolute text-slate-300 text-3xl right-1 top-1" : "absolute text-teal-700 text-3xl right-1 top-1"
    });
  };

  

  const handleNavigateButton = async ()=>{
    navigate("http://localhost:3000/signup")
  }

  // This function is called when the user clicks the "Continue with Google" button.
  // It signs the user in with their Google account using the Firebase `signInWithGoogle` function.
  // After the user is signed in, it navigates the user to the `/welcome` route.
  const handeSignUpWithGoogleButton = async ()=>{
    await firebaseClientService.handleSigninWithGoogle()
    navigate("http://localhost:3000/welcome")

  }

  


  const handleChange = (e:ChangeEvent<HTMLInputElement>)=>{
    const {name, value} = e.target
    setInputs(prevValues => 
      ({ ...prevValues, [name]: value }))
  }


  const [errorOnLoggin, setErrorOnLoggin] = useState(false)

  // This function is called when the user submits the login form.
  // It attempts to log the user in using the Firebase `signInWithEmailAndPassword` function.
  // If the login is successful, it navigates the user to the `/welcome` route.
  // If the login is unsuccessful, it sets the `errorOnLoggin` state variable to `true` 
  //and clears the values in the `inputs` state variable.
  const handleLoginButton = async (e: FormEvent<HTMLFormElement>)=>{
    e.preventDefault();
    const res = await firebaseClientService.logWithEmailAndPassword(inputs.email, inputs.password)
    if(res?.user){
      navigate("http://localhost:3000/welcome")
    } else{
    setErrorOnLoggin(true)
    setInputs({
      email:"",
      password:""
    })
   }
  }
  
  const inputClass = " h-9 rounded-md px-2"

  return (
    <>
      <Head>
        <title>Log in!</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
  
      <main>
        <div className='w-screen h-screen flex bg-slate-600  items-center justify-end '>
          <div className='w-[33%] min-h-[60%] h-fit flex flex-col p-8 justify-between items-center'>
          {onload?
          <button className='bg-slate-500 px-3 py-1 rounded-full text-teal-700 font-semibold'><FontAwesomeIcon icon={faGoogle} className="text-yellow-500"/> Continue With Google</button>
          :
          <button className='bg-white px-3 py-1 rounded-full text-teal-700 font-semibold' onClick={handeSignUpWithGoogleButton}><FontAwesomeIcon icon={faGoogle} className="text-yellow-500"/> Continue With Google</button>
          }
            <form className='flex flex-grow flex-col w-[100%] min-h-[70%]  p-8 justify-between items-center' onSubmit={handleLoginButton}>
              <div className='flex items-end '>
                <FontAwesomeIcon icon={faUser}  className='text-white text-3xl mr-2'/>
                <input name='email' placeholder='Email' value={inputs.email} onChange={handleChange} className={inputClass} required={true}></input>
              </div>
              <div className='flex items-end relative'>
                <FontAwesomeIcon icon={faLock} className='text-white text-3xl mr-2'/>
                <input type={visibility.type} name='password' autoComplete="new-password" placeholder='Password' value={inputs.password} onChange={handleChange} className={inputClass} required={true}></input>
                <div onClick={handleToggleButton}><FontAwesomeIcon icon={faEye} className={visibility.style}/></div>
              </div>
              <button type="submit" className=' bg-white text-teal-700 h-10 w-28 font-semibold rounded-full'>Log in</button>
              {errorOnLoggin &&  <p className='text-lg font-bold text-rose-500 text-center '>Incorrect user or password  please try again!</p>}
            </form>
            <button className='bg-white text-teal-700 h-8 w-24 font-semibold rounded-full' onClick={handleNavigateButton}>sign up</button>
          </div>
        </div>
      </main>
    </>
  )
}
